apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - image: grafana/grafana:6.4.3
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-storage
          readOnly: false
        - mountPath: /etc/grafana/provisioning/datasources
          name: grafana-datasources
          readOnly: false
        - mountPath: /etc/grafana/provisioning/dashboards
          name: grafana-dashboards
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/apiserver
          name: grafana-dashboard-apiserver
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/cluster-total
          name: grafana-dashboard-cluster-total
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/controller-manager
          name: grafana-dashboard-controller-manager
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/k8s-resources-cluster
          name: grafana-dashboard-k8s-resources-cluster
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/k8s-resources-namespace
          name: grafana-dashboard-k8s-resources-namespace
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/k8s-resources-node
          name: grafana-dashboard-k8s-resources-node
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/k8s-resources-pod
          name: grafana-dashboard-k8s-resources-pod
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/k8s-resources-workload
          name: grafana-dashboard-k8s-resources-workload
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/k8s-resources-workloads-namespace
          name: grafana-dashboard-k8s-resources-workloads-namespace
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/kubelet
          name: grafana-dashboard-kubelet
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/namespace-by-pod
          name: grafana-dashboard-namespace-by-pod
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/namespace-by-workload
          name: grafana-dashboard-namespace-by-workload
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/node-cluster-rsrc-use
          name: grafana-dashboard-node-cluster-rsrc-use
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/node-rsrc-use
          name: grafana-dashboard-node-rsrc-use
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/nodes
          name: grafana-dashboard-nodes
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/persistentvolumesusage
          name: grafana-dashboard-persistentvolumesusage
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/pod-total
          name: grafana-dashboard-pod-total
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/pods
          name: grafana-dashboard-pods
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/prometheus-remote-write
          name: grafana-dashboard-prometheus-remote-write
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/prometheus
          name: grafana-dashboard-prometheus
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/proxy
          name: grafana-dashboard-proxy
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/scheduler
          name: grafana-dashboard-scheduler
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/statefulset
          name: grafana-dashboard-statefulset
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/workload-total
          name: grafana-dashboard-workload-total
          readOnly: false
        - mountPath: conf
          name: grafana-ldap
          readOnly: false
        env:
        - name: GF_INSTALL_PLUGINS
          value: "grafana-kubernetes-app,camptocamp-prometheus-alertmanager-datasource,grafana-piechart-panel"
        - name: GF_ROOT_URL
          value: "http://grafana:3000"
        - name: GF_AUTH_LDAP_ENABLED
          value: "true"
        - name: GF_AUTH_LDAP_CONFIG_FILE
          value: "/conf/ldap.toml"
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: grafana
      volumes:
      - emptyDir: {}
        name: grafana-storage
      - name: grafana-datasources
        secret:
          secretName: grafana-datasources
      - configMap:
          name: grafana-dashboards
        name: grafana-dashboards
      - configMap:
          name: grafana-dashboard-apiserver
        name: grafana-dashboard-apiserver
      - configMap:
          name: grafana-dashboard-cluster-total
        name: grafana-dashboard-cluster-total
      - configMap:
          name: grafana-dashboard-controller-manager
        name: grafana-dashboard-controller-manager
      - configMap:
          name: grafana-dashboard-k8s-resources-cluster
        name: grafana-dashboard-k8s-resources-cluster
      - configMap:
          name: grafana-dashboard-k8s-resources-namespace
        name: grafana-dashboard-k8s-resources-namespace
      - configMap:
          name: grafana-dashboard-k8s-resources-node
        name: grafana-dashboard-k8s-resources-node
      - configMap:
          name: grafana-dashboard-k8s-resources-pod
        name: grafana-dashboard-k8s-resources-pod
      - configMap:
          name: grafana-dashboard-k8s-resources-workload
        name: grafana-dashboard-k8s-resources-workload
      - configMap:
          name: grafana-dashboard-k8s-resources-workloads-namespace
        name: grafana-dashboard-k8s-resources-workloads-namespace
      - configMap:
          name: grafana-dashboard-kubelet
        name: grafana-dashboard-kubelet
      - configMap:
          name: grafana-dashboard-namespace-by-pod
        name: grafana-dashboard-namespace-by-pod
      - configMap:
          name: grafana-dashboard-namespace-by-workload
        name: grafana-dashboard-namespace-by-workload
      - configMap:
          name: grafana-dashboard-node-cluster-rsrc-use
        name: grafana-dashboard-node-cluster-rsrc-use
      - configMap:
          name: grafana-dashboard-node-rsrc-use
        name: grafana-dashboard-node-rsrc-use
      - configMap:
          name: grafana-dashboard-nodes
        name: grafana-dashboard-nodes
      - configMap:
          name: grafana-dashboard-persistentvolumesusage
        name: grafana-dashboard-persistentvolumesusage
      - configMap:
          name: grafana-dashboard-pod-total
        name: grafana-dashboard-pod-total
      - configMap:
          name: grafana-dashboard-pods
        name: grafana-dashboard-pods
      - configMap:
          name: grafana-dashboard-prometheus-remote-write
        name: grafana-dashboard-prometheus-remote-write
      - configMap:
          name: grafana-dashboard-prometheus
        name: grafana-dashboard-prometheus
      - configMap:
          name: grafana-dashboard-proxy
        name: grafana-dashboard-proxy
      - configMap:
          name: grafana-dashboard-scheduler
        name: grafana-dashboard-scheduler
      - configMap:
          name: grafana-dashboard-statefulset
        name: grafana-dashboard-statefulset
      - configMap:
          name: grafana-dashboard-workload-total
        name: grafana-dashboard-workload-total
      - name: grafana-ldap
        configMap:
          name: grafana-ldap
          items:
          - key: ldap.toml
            path: ldap.toml

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pv-claim-grafana-storage
spec:
  accessModes:
  - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard-pv3

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-ldap
  namespace: monitoring
data:
  ldap.toml: |                                                                                
    [[servers]]                                                        
    # Ldap server host (specify multiple hosts space separated)
    host = "ldap.data.svc.cluster.local"                                                      # Default port is 389 or 636 if use_ssl = true                                  
    port = 389                                                                      
    # Set to true if ldap server supports TLS                          
    use_ssl = false                                                                 
    # Set to true if connect ldap server with STARTTLS pattern (create connection in
    start_tls = false                                                               
    # set to true if you want to skip ssl cert validation                           
    ssl_skip_verify = false                                                         
    # set to the path to your root CA certificate or leave unset to use system defau
    # root_ca_cert = "/path/to/certificate.crt"                                     
    # Authentication against LDAP servers requiring client certificates
    # client_cert = "/path/to/client.crt"                                           
    # client_key = "/path/to/client.key"                                            
                                                                                
    # Search user bind dn                                                           
    bind_dn = "cn=admin,dc=newtech,dc=fr"                             
    # Search user bind password                                                     
    # If the password contains # or ; you have to wrap it with triple quotes. Ex """
    bind_password = 'tlsjsiwvld'                                                       
                                                                   
    # User search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s
    search_filter = "(uid=%s)"                                
                                                                                
    # An array of base dns to search through                                        
    search_base_dns = ["ou=people,dc=newtech,dc=fr"]                            
                                                                   
    ## For Posix or LDAP setups that does not support member_of attribute you can de
    ## Please check grafana LDAP docs for examples                        
    # group_search_filter = "(&(objectClass=posixGroup)(memberUid=%s))"
    # group_search_base_dns = ["ou=groups,dc=grafana,dc=org"]                       
    # group_search_filter_user_attribute = "uid"                          
                                                                      
    # Specify names of the ldap attributes your ldap uses                           
    [servers.attributes]                                                            
    name = "givenName"                                
    surname = "sn"                                                        
    username = "cn"                                                       
    #member_of = "memberOf"                                                          
    email =  "uid" 

    # Map ldap groups to grafana org roles                                          
    [[servers.group_mappings]]                                         
    group_dn = "cn=admins,ou=groups,dc=grafana,dc=org"                 
    org_role = "Admin"                                                              
    # To make user an instance admin  (Grafana Admin) uncomment line below
    # grafana_admin = true                                             
    # The Grafana organization database id, optional, if left out the default org (i
    # org_id = 1                                                          
                                                                      
    [[servers.group_mappings]]                                                      
    group_dn = "cn=users,ou=groups,dc=grafana,dc=org"                               
    org_role = "Editor"                               
                                                                      
    [[servers.group_mappings]]                                            
    # If you want to match all (or no ldap groups) then you can use wildcard        
    group_dn = "*"                                                                  
    org_role = "Viewer"                               

